BB=/system/xbin/busybox;

case $1 in
gpu)
  echo "Clock: $(cat /sys/module/pvrsrvkm/parameters/sgx_gpu_clk) MHz"
  ;;
cpufreq)
  CPU0=$($BB cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq 2> /dev/null);
  CPU1=$($BB cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq 2> /dev/null);
  CPU2=$($BB cat /sys/devices/system/cpu/cpu2/cpufreq/scaling_cur_freq 2> /dev/null);
  CPU3=$($BB cat /sys/devices/system/cpu/cpu3/cpufreq/scaling_cur_freq 2> /dev/null);

  if [ -z "$CPU0" ]; then CPU0="Offline"; else CPU0="$((CPU0 / 1000)) MHz"; fi;
  if [ -z "$CPU1" ]; then CPU1="Offline"; else CPU1="$((CPU1 / 1000)) MHz"; fi;
  if [ -z "$CPU2" ]; then CPU2="Offline"; else CPU2="$((CPU2 / 1000)) MHz"; fi;
  if [ -z "$CPU3" ]; then CPU3="Offline"; else CPU3="$((CPU3 / 1000)) MHz"; fi;
$BB echo "Core 0: $CPU0@nCore 1: $CPU1@nCore 2: $CPU2@nCore 3: $CPU3";
;;
entropy)
  echo "$(cat /proc/sys/kernel/random/entropy_avail)"
  ;;
batttype)
  echo "Charge Type: $(cat /sys/devices/platform/sec-battery/power_supply/battery/charge_type)"
  ;;
battinput)
  echo "Input: $(cat /sys/devices/platform/sec-battery/power_supply/battery/current_max) mA"
  ;;
battcurrav)
  echo "Current Average: $(cat /sys/devices/platform/sec-battery/power_supply/battery/current_avg) mA"
  ;;
battcurrnow)
  echo "Current Now: $(cat /sys/devices/platform/sec-battery/power_supply/battery/current_now) mA"
  ;;
battvoltnow)
  echo "Voltage Now: $(($(cat /sys/devices/platform/sec-battery/power_supply/battery/voltage_now) /1000)) mV"
  ;;
batttemp)
  echo "Temp: $(($(cat /sys/devices/platform/sec-battery/power_supply/battery/temp) /10)) Â°C"
  ;;
battcapa)
  echo "Capacity: $(cat /sys/devices/platform/sec-battery/power_supply/battery/capacity) %"
  ;;
battstatus)
  echo "Status: $(cat /sys/devices/platform/sec-battery/power_supply/battery/status)"
  ;;
batthealth)
  echo "Health: $(cat /sys/devices/platform/sec-battery/power_supply/battery/health)"
  ;;
actual_brightness)
  echo "$(cat /sys/class/backlight/panel/actual_brightness)"
  ;;
LiveMemory)
  while read -r TYPE MEM KB; do
	export KB
	if [ "$TYPE" = "MemTotal:" ]; then
		TOTAL=$((MEM / 1024));
	elif [ "$TYPE" = "MemFree:" ]; then
		FREE=$((MEM / 1024));
	elif [ "$TYPE" = "Cached:" ]; then
		CACHED=$((MEM / 1024));
	fi;
  done < /proc/meminfo;

  FREE="$((FREE + CACHED))";
  USED="$((TOTAL - FREE))";

  $BB echo "Total: $TOTAL MB@nUsed: $USED MB@nFree: $FREE MB";
;;
LiveSwap)
  while read -r TYPE MEM KB; do
	export KB
	if [ "$TYPE" = "SwapTotal:" ]; then
		TOTAL=$((MEM / 1024));
	elif [ "$TYPE" = "SwapFree:" ]; then
		FREE=$((MEM / 1024));
	elif [ "$TYPE" = "SwapCached:" ]; then
		CACHED=$((MEM / 1024));
	fi;
  done < /proc/meminfo;

  FREE="$((FREE + CACHED))";
  USED="$((TOTAL - FREE))";

  if [ "$TOTAL" == 0 ]; then
	$BB echo "Swap: disabled";
  else
	$BB echo "Total: $TOTAL MB@nUsed: $USED MB@nFree: $FREE MB";
  fi;
;;
LiveUpTime)
  TOTAL=$($BB awk '{ print $1 }' /proc/uptime);
  AWAKE=$(($($BB awk '{s+=$2} END {print s}' /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state) / 100));
  SLEEP=$($BB awk "BEGIN { print ($TOTAL - $AWAKE) }");
		
  PERC_A=$($BB awk "BEGIN { print ( ($AWAKE / $TOTAL) * 100) }");
  PERC_A="$($BB printf "%0.1f\n" $PERC_A)%";
  PERC_S=$($BB awk "BEGIN { print ( ($SLEEP / $TOTAL) * 100) }");
  PERC_S="$($BB printf "%0.1f\n" $PERC_S)%";
		
  TOTAL=$($BB echo - | $BB awk -v "S=$TOTAL" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}');
  AWAKE=$($BB echo - | $BB awk -v "S=$AWAKE" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}');
  SLEEP=$($BB echo - | $BB awk -v "S=$SLEEP" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}');
  $BB echo "Total: $TOTAL (100.0%)@nSleep: $SLEEP ($PERC_S)@nAwake: $AWAKE ($PERC_A)";
;;
UKSMStats)
  UKSM=$(cat /sys/kernel/mm/uksm/run)
	if [ "$UKSM" == 1 ]; then
		RUNS=`echo "Number of full scans: $((\`cat /sys/kernel/mm/uksm/full_scans\`))"`
		SAVEDMEM=`echo "Saved memory: $((\`cat /sys/kernel/mm/uksm/pages_sharing\`*4096/1024/1024)) MB"`
		SHARDMEM=`echo "Shared memory: $((\`cat /sys/kernel/mm/uksm/pages_shared\`*4096/1024/1024)) MB"`
		echo "$RUNS"@n"$SAVEDMEM"@n"$SHARDMEM"
	else
		echo UKSM is Disabled
	fi
  ;;
Time)
		STATE="";
		CNT=0;
		SUM=`awk '{s+=$2} END {print s}' /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state`;
		
		while read FREQ TIME; do
			if [ "$CNT" -ge $2 ] && [ "$CNT" -le $3 ]; then
				FREQ="$((FREQ / 1000)) MHz:";
				if [ $TIME -ge "100" ]; then
					PERC=`awk "BEGIN { print ( ($TIME / $SUM) * 100) }"`;
					PERC="`printf "%0.1f\n" $PERC`%";
					TIME=$((TIME / 100));
					STATE="$STATE $FREQ `echo - | awk -v "S=$TIME" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'` ($PERC)@n";
				fi;
			fi;
			CNT=$((CNT+1));
		done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state;
		
		STATE=${STATE%??};
		echo "$STATE";
;;
UnUsed)
		UNUSED="";
		while read FREQ TIME; do
			FREQ="$((FREQ / 1000)) MHz";
			if [ $TIME -lt "100" ]; then
				UNUSED="$UNUSED$FREQ, ";
			fi;
		done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state;
		
		UNUSED=${UNUSED%??};
		echo "$UNUSED";
;;
check_service)
  CORTEX_CHECK=`pgrep -f "/system/xbin/busybox sh /sbin/cortexbrain-tune.sh" | wc -l`;
	if [ "$CORTEX_CHECK" != 0 ]; then
                echo "SERVICE ONLINE";
	else
                echo "SERVICE OFFLINE";
	fi;
  ;;
usb_status)
  USB_STATUS=$(cat /sys/class/android_usb/android0/functions);
	if [ "$USB_STATUS" == "mtp,acm,adb" ]; then
                echo MTP MODE
	elif [ "$USB_STATUS" == "ptp,adb" ]; then
                echo PTP MODE
	elif [ "$USB_STATUS" == "mass_storage,adb" ]; then
                echo UMS MODE
	elif [ "$USB_STATUS" == "mtp,acm,adb,hid" ]; then
                echo USB_KEYBOARD-MOUSE MODE
	else
                echo UNSUPPORTED MODE@nPlease enable USB-Debugging and re-connect cable
	fi
  ;;
dns)
  $BB echo "$(getprop net.rmnet0.dns1)@n$(getprop net.rmnet0.dns2)"
  ;;
gps)
  var_gps="/system/etc/gps.conf";
  CHECKGPS1=$($BB cat $var_gps | grep "NTP_SERVER=0.*");
  CHECKGPS2=$($BB cat $var_gps | grep "NTP_SERVER=*");
	if [ "$CHECKGPS1" == "NTP_SERVER=0.asia.pool.ntp.org" ] || [ "$CHECKGPS2" == "NTP_SERVER=asia.pool.ntp.org" ]; then
                echo ASIA
	elif [ "$CHECKGPS1" == "NTP_SERVER=0.europe.pool.ntp.org" ] || [ "$CHECKGPS2" == "NTP_SERVER=europe.pool.ntp.org" ]; then
                echo EUROPE
	elif [ "$CHECKGPS1" == "NTP_SERVER=0.oceania.pool.ntp.org" ] || [ "$CHECKGPS2" == "NTP_SERVER=oceania.pool.ntp.org" ]; then
                echo OCEANIA
	elif [ "$CHECKGPS1" == "NTP_SERVER=0.north-america.pool.ntp.org" ] || [ "$CHECKGPS2" == "NTP_SERVER=north-america.pool.ntp.org" ]; then
                echo NORTH AMERICA
	elif [ "$CHECKGPS1" == "NTP_SERVER=0.south-america.pool.ntp.org" ] || [ "$CHECKGPS2" == "NTP_SERVER=south-america.pool.ntp.org" ]; then
                echo SOUTH AMERICA
	elif [ "$CHECKGPS1" == "NTP_SERVER=0.africa.pool.ntp.org" ] || [ "$CHECKGPS2" == "NTP_SERVER=africa.pool.ntp.org" ]; then
                echo AFRICA
	else
                echo UNSUPPORTED REGION
	fi
  ;;
check_cron)
  CRON_SERVICE=$(pidof crond | wc -l);
	if [ "$CRON_SERVICE" == 1 ]; then
		echo "SERVICE ONLINE";
	else
		echo "SERVICE OFFLINE";
	fi;
  ;;
check_cortex)
  CORTEX_CHECK=$(pgrep -f "/system/xbin/busybox sh /sbin/cortexbrain-tune.sh" | wc -l);
	if [ "$CORTEX_CHECK" != 0 ]; then
		echo "SERVICE ONLINE";
	else
		echo "SERVICE OFFLINE";
	fi;
  ;;
Live_modules)
  for i in $(lsmod | awk '{print $1}'); do
	echo "$i@n";
  done;
  ;;
esac
