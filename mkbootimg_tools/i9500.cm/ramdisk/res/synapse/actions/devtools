BB=/system/xbin/busybox;

TIMESTAMP=`date +%Y-%m-%d.%H.%M.%S`;

# SQLite log location
LOGS=/sdcard/nvm/Logs/SQLite.txt;

if [ "$($BB mount | grep rootfs | cut -c 26-27 | grep -c ro)" -eq "1" ]; then
	$BB mount -o remount,rw /;
fi;
if [ "$($BB mount | grep system | grep -c ro)" -eq "1" ]; then
	$BB mount -o remount,rw /system;
fi;

case $1 in
  qhdres)
	wm size 540x960;
	wm density 240;
  ;;
  hdres1)
	wm size 720x1280;
	wm density 280;
  ;;
  hdres2)
	wm size 720x1280;
	wm density 320;
  ;;
  fullhdres1)
	wm size 1080x1920;
	wm density 420;
  ;;
  fullhdres2)
	wm size 1080x1920;
	wm density 480;
  ;;
  quadhdres)
	wm size 1440x2560;
	wm density 560;
  ;;
  reboot)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	$BB sync;
	$BB sleep 1;
	reboot "$2";
  ;;
  SystemUpdateService)
    P=/res/synapse/nvm/SystemUpdateService
    if [ ! -z "$2" ]; then
    if [ "$2" == Enabled ]; then
      echo Enabled > $P
	  pm enable com.google.android.gms/.update.SystemUpdateActivity
	  pm enable com.google.android.gms/.update.SystemUpdateService
	  pm enable com.google.android.gms/.update.SystemUpdateService$ActiveReceiver
	  pm enable com.google.android.gms/.update.SystemUpdateService$Receiver
	  pm enable com.google.android.gms/.update.SystemUpdateService$SecretCodeReceiver
	  pm enable com.google.android.gsf/.update.SystemUpdateActivity
	  pm enable com.google.android.gsf/.update.SystemUpdatePanoActivity
	  pm enable com.google.android.gsf/.update.SystemUpdateService
	  pm enable com.google.android.gsf/.update.SystemUpdateService$Receiver
	  pm enable com.google.android.gsf/.update.SystemUpdateService$SecretCodeReceiver
    elif [ "$2" == Disabled ]; then
      echo Disabled > $P
	  # Nothing to do here
    fi; fi
    copy=$(cat $P)
    if [ "$copy" == Enabled ]; then
      echo Enabled
    elif [ "$copy" == Disabled ]; then
      echo Disabled
    fi
  ;;
  cleardata)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	am force-stop com.af.synapse 2> /dev/null;
	$BB rm -R /data/data/com.af.synapse/*;
	$BB rm -f /data/dalvik-cache/arm/data@app@com.af.synapse*;
	$BB rm -f /data/dalvik-cache/profiles/com.af.synapse;
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  clean_initd)
	$BB rm -rf /system/etc/init.d/*
	$BB sync;
	$BB sleep 1;
	echo "init.d folder cleaned";
  ;;
  restart)
    	am force-stop com.af.synapse 2> /dev/null;
    	reset_uci;
	$BB sync;
    	$BB sleep 1;
    	am start -a android.intent.action.MAIN -n com.af.synapse/.MainActivity 2> /dev/null;
  ;;
  fix_wifi)
	svc wifi disable 2> /dev/null;
	rm -f /data/misc/dhcp/dhcpcd*;
	svc wifi enable 2> /dev/null;
	echo "WIFI Release Renew is DONE";
  ;;
  optimizedb)
	for i in `$BB find /data -iname "*.db"`; do 
		/res/synapse/sqlite3 $i 'VACUUM;' 2> /dev/null;
		/res/synapse/sqlite3 $i 'REINDEX;' 2> /dev/null;
	done;

	for i in `$BB find /sdcard -iname "*.db"`; do
		/res/synapse/sqlite3 $i 'VACUUM;' 2> /dev/null;
		/res/synapse/sqlite3 $i 'REINDEX;' 2> /dev/null;
	done;
		
	$BB echo "Databases have been optimized.";
  ;;
  fstrim)
	echo -e "Trim /data"
	/sbin/fstrim -v /data
	echo -e ""
	echo -e "Trim /cache"
	/sbin/fstrim -v /cache
	echo -e ""
	echo -e "Trim /system"
	/sbin/fstrim -v /system
	echo -e ""
	$BB sync
  ;;
  wipe_cache_reboot)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	$BB rm -rf /cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  wipe_dalvik_reboot)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	$BB rm -rf /data/dalvik-cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  wipe_cache-dalvik_reboot)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	$BB rm -rf /cache/*
	$BB rm -rf /data/dalvik-cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  clean_up)
	$BB rm -rf /cache/lost+found/*
	$BB rm -rf /data/lost+found/*
	$BB rm -rf /data/anr/*
	$BB rm -rf /data/clipboard/*
	$BB rm -rf /data/system/dropbox/*
	$BB rm -rf /data/tombstones/*
	$BB sync;
	$BB sleep 1;
	echo "Clean up done";
  ;;
scr_cache)
  P=/res/synapse/nvm/scr_cache
  if [ ! -z "$2" ]; then
  if [ "$2" == 0 ]; then
    echo 0 > $P
	setprop persist.sys.scrollingcache 0
  elif [ "$2" == 1 ]; then
    echo 1 > $P
	setprop persist.sys.scrollingcache 1
  elif [ "$2" == 2 ]; then
    echo 2 > $P
	setprop persist.sys.scrollingcache 2
  elif [ "$2" == 3 ]; then
    echo 3 > $P
	setprop persist.sys.scrollingcache 3
  fi; fi
  copy=$(cat $P)
  if [ "$copy" == 0 ]; then
    echo 0
  elif [ "$copy" == 1 ]; then
    echo 1
  elif [ "$copy" == 2 ]; then
    echo 2
  elif [ "$copy" == 3 ]; then
    echo 3
  fi
  ;;
SystemUpdateService)
  P=/res/synapse/nvm/SystemUpdateService
  if [ ! -z "$2" ]; then
  if [ "$2" == Enabled ]; then
    echo Enabled > $P
	pm enable com.google.android.gms/.update.SystemUpdateActivity
	pm enable com.google.android.gms/.update.SystemUpdateService
	pm enable com.google.android.gms/.update.SystemUpdateService$ActiveReceiver
	pm enable com.google.android.gms/.update.SystemUpdateService$Receiver
	pm enable com.google.android.gms/.update.SystemUpdateService$SecretCodeReceiver
	pm enable com.google.android.gsf/.update.SystemUpdateActivity
	pm enable com.google.android.gsf/.update.SystemUpdatePanoActivity
	pm enable com.google.android.gsf/.update.SystemUpdateService
	pm enable com.google.android.gsf/.update.SystemUpdateService$Receiver
	pm enable com.google.android.gsf/.update.SystemUpdateService$SecretCodeReceiver
  elif [ "$2" == Disabled ]; then
    echo Disabled > $P
	# Nothing to do here
  fi; fi
  copy=$(cat $P)
  if [ "$copy" == Enabled ]; then
    echo Enabled
  elif [ "$copy" == Disabled ]; then
    echo Disabled
  fi
  ;;
esac;

$BB mount -t rootfs -o remount,ro rootfs;
$BB mount -o remount,ro /system;

